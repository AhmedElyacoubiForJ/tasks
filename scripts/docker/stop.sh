#!/bin/bash
# ----------------------------------------
# üõë Stoppt und entfernt Dev-Container & Volume
# ----------------------------------------

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"
source "$SCRIPT_DIR/colors.sh"

ENV_FILE="$ROOT_DIR/db-config/container/dev/.env.dev"

# ENV laden
if [[ ! -f "$ENV_FILE" ]]; then
  echo -e "${RED}‚ùå ENV-Datei nicht gefunden: $ENV_FILE${NC}"
  exit 1
else
  echo -e "${GREEN}‚úÖ ENV-Datei gefunden: $ENV_FILE${NC}"
fi

set -a
source "$ENV_FILE"
set +a

echo ""
echo -e "${BLUE}üõë Stoppe Dev-Container...${NC}"

# ----------------------------------------
# üîª App-Container stoppen und entfernen
# ----------------------------------------

if docker ps -a --format '{{.Names}}' | grep -q "^$APP_CONTAINER$"; then
  echo -e "${YELLOW}üîª Entferne App-Container: $APP_CONTAINER${NC}"
  docker rm -f "$APP_CONTAINER"
else
  echo -e "${BLUE}‚ÑπÔ∏è App-Container '$APP_CONTAINER' l√§uft nicht.${NC}"
fi

# ----------------------------------------
# üîª DB-Container stoppen und entfernen
# ----------------------------------------

if docker ps -a --format '{{.Names}}' | grep -q "^$DB_CONTAINER$"; then
  echo -e "${YELLOW}üîª Entferne DB-Container: $DB_CONTAINER${NC}"
  docker rm -f "$DB_CONTAINER"
else
  echo -e "${BLUE}‚ÑπÔ∏è DB-Container '$DB_CONTAINER' l√§uft nicht.${NC}"
fi

# ----------------------------------------
# üì¶ Volume optional entfernen
# ----------------------------------------

echo ""
read -p "‚ùì Volume '$VOLUME' auch l√∂schen? [y/N]: " confirm
if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
  echo -e "${YELLOW}üßπ Entferne Volume: $VOLUME${NC}"
  docker volume rm "$VOLUME"
else
  echo -e "${BLUE}üì¶ Volume bleibt erhalten: $VOLUME${NC}"
fi

echo ""
echo -e "${GREEN}‚úÖ Dev-Umgebung wurde gestoppt.${NC}"
exit 0
